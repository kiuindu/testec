repeat
	wait()
until game:IsLoaded()

--// Variables

local services
services = setmetatable({
	Get = function(self, ...)
		local allServices = {}

		for _, service in next, { ... } do
			table.insert(allServices, self[service])
		end

		return unpack(allServices)
	end,
}, {
	__index = function(self, p)
		if p == "VirtualInputManager" then return getvirtualinputmanager and getvirtualinputmanager() or Instance.new("VirtualInputManager") end

		local service = game:GetService(p)
		if p == "VirtualInputManager" then service.Name = "VirtualInputManager " end

		rawset(self, p, service)
		return rawget(self, p)
	end,
})

local workspace, Players, TPS, UserInputService, HttpService, CoreGui, GuiService, TextService, ScriptContext, MemStorageService = services:Get("Workspace", "Players", "TeleportService", "UserInputService", "HttpService", "CoreGui", "GuiService", "TextService", "ScriptContext", "MemStorageService")
local player = Players.LocalPlayer

local coroutine = coroutine
local create = coroutine.create
local resume = coroutine.resume

local function spawn(f, ...) resume(create(f), ...) end

do --// Console // TextLogger from Aztup but modified to fit my needs
	ConsoleLogger = {}
	ConsoleLogger.__index = ConsoleLogger
	local screenGui = game:GetObjects("rbxassetid://15357931398")[1]
	local Text = {}
	local ProtectGui = protectgui or (syn and syn.protect_gui) or function() end
	local Configs = {
		chatLoggerAutoScroll = true,
		OutputRedirect = true,
	}

	local Configs = isfile("Trap Hub" .. "/console/configs.json") and HttpService:JSONDecode(readfile("Trap Hub" .. "/console/configs.json")) or writefile("Trap Hub" .. "/console/configs.json", HttpService:JSONEncode(Configs)) and Configs

	local H, S, V = Color3.toHSV(Color3.fromRGB(170, 16, 199))
	local AccentColorDark = Color3.fromHSV(H, S, V / 1.5)

	local Types = {
		["WARN"] = [[255, 255, 50]],
		["INFO"] = [[50, 180, 255]],
		["OUTPUT"] = [[230, 230, 230]],
		["ERROR"] = [[250, 50, 0]],
	}

	local function cleantext(Text) return Text:gsub("<[^>]+>", "") end

	do --// Text
		Text.__index = Text
		function Text.new(options)
			local IsOld = options.IsOld
			local self = setmetatable(options, Text)
			self._originalText = options.originalText or options.text
			self._type = options.type

			self.label = screenGui.Main.logsContainer.logs.label:Clone()

			local text
			if not IsOld then
				local timeText = DateTime.now():FormatLocalTime("H:mm:ss", "en-us")
				self._originalText = ('[%s] <font color="rgb(%s)">[%s] %s</font>'):format(timeText, Types[options.type], options.type, cleantext(self._originalText))
			end
			self:SetText(self._originalText)

			table.insert(self._parent.logs, self)
			table.insert(self._parent.allLogs, {
				_originalText = self._originalText,
				_type = self._type,
			})

			local contentSize = self._parent._layout.AbsoluteContentSize
			self._parent._logs.CanvasSize = UDim2.fromOffset(0, contentSize.Y)

			if self._parent._Configs.chatLoggerAutoScroll then self._parent._logs.CanvasPosition = Vector2.new(0, contentSize.Y) end

			return self
		end

		function Text:Destroy()
			local logs = self._parent.logs
			self.Delete()
			local index = table.find(logs, self)
			if index then table.remove(logs, index) end
		end

		function Text:SetText(text)
			local textwithhour = text:gsub("%[%d%d:%d%d:%d%d%]%s+", "")
			self.label.Text = text
			local textSize = self._parent.textSizeCache[textwithhour] or TextService:GetTextSize(self.label.ContentText, 20, Enum.Font.Roboto, Vector2.new(self._parent._logs.AbsoluteSize.X, math.huge))
			self._parent.textSizeCache[textwithhour] = textSize
			self.label.Size = UDim2.new(1, 0, 0, textSize.Y)
			self.label.Parent = self._parent._logs
			local label = self.label
			self.Delete = function() label:Destroy() end
			self._parent:UpdateCanvas()
		end
	end

	function ConsoleLogger.new(params)
		local self = setmetatable({}, ConsoleLogger)
		local screenGui = screenGui:Clone()
		local main = screenGui.Main
		local title = main.title
		local dragger = main.dragger
		local logsContainer = main.logsContainer
		local logs = logsContainer.logs
		local layout = logs.UIListLayout
		local ToggleOutput = logsContainer.ToggleOuterOUTPUT
		local ToggleAutoScroll = logsContainer.ToggleOuterAutoScroll
		local ButtonClear = logsContainer.ButtonOuterCLEAR

		self.params = params
		self._gui = screenGui
		self.logs = {}
		self.allLogs = {}
		self._enabled = true
		screenGui.Enabled = true
		main.Visible = true
		self._main = main
		self._logs = logs
		self._layout = layout
		self._ToggleOutput = ToggleOutput
		self._ToggleAutoScroll = ToggleAutoScroll
		self._ButtonClear = ButtonClear
		self._Configs = Configs or {
			chatLoggerAutoScroll = true,
			OutputRedirect = true,
		}
		self._Version = screenGui:FindFirstChild("Version") and screenGui.Version.Value or "1.0.0"
		self.textSizeCache = {}

		for _, v in pairs(self._logs:GetChildren()) do
			if v:IsA("TextLabel") then v:Destroy() end
		end

		local dragStart
		local startPos
		local dragging

		local function displaytoggle(toggle, Bool)
			Bool = not not Bool

			toggle.ToggleInner.BackgroundColor3 = Bool and Color3.fromRGB(170, 16, 199) or Color3.fromRGB(34, 28, 34)
			toggle.ToggleInner.BorderColor3 = Bool and AccentColorDark or Color3.fromRGB(20, 20, 20)
			writefile("Trap Hub" .. "/console/configs.json", HttpService:JSONEncode(self._Configs))
		end

		self._ToggleOutput.ToggleRegion.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				local value = not self._Configs.OutputRedirect
				self._Configs.OutputRedirect = value
				displaytoggle(self._ToggleOutput, value)
			end
		end)

		self._ToggleAutoScroll.ToggleRegion.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				local value = not self._Configs.chatLoggerAutoScroll
				self._Configs.chatLoggerAutoScroll = value
				displaytoggle(self._ToggleAutoScroll, value)
			end
		end)

		self._ButtonClear.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then self:Clear() end
		end)

		displaytoggle(self._ToggleOutput, self._Configs.OutputRedirect)
		displaytoggle(self._ToggleAutoScroll, self._Configs.chatLoggerAutoScroll)

		dragger.InputBegan:Connect(function(inputObject, gpe)
			if inputObject.UserInputType == Enum.UserInputType.MouseButton1 then
				local dragStart = inputObject.Position
				dragStart = Vector2.new(dragStart.X, dragStart.Y)

				local startPos = main.Size

				repeat
					local mousePosition = UserInputService:GetMouseLocation()
					local delta = mousePosition - dragStart

					main.Size = UDim2.new(0, startPos.X.Offset + delta.X, 0, (startPos.Y.Offset + delta.Y) - 36)

					task.wait()
				until inputObject.UserInputState == Enum.UserInputState.End

				self:UpdateCanvas()
				-- self.OnUpdate:Fire("Size", main.AbsoluteSize)
			end
		end)

		title.InputBegan:Connect(function(inputObject, gpe)
			if inputObject.UserInputType ~= Enum.UserInputType.MouseButton1 then return end

			dragging = true

			dragStart = inputObject.Position
			startPos = main.Position

			repeat
				task.wait()
			until inputObject.UserInputState == Enum.UserInputState.End

			-- self.OnUpdate:Fire("Position", main.AbsolutePosition)
			dragging = false

			self:UpdateCanvas()
		end)

		UserInputService.InputChanged:Connect(function(input, gpe)
			if not dragging or input.UserInputType ~= Enum.UserInputType.MouseMovement then return end

			local delta = input.Position - dragStart
			local yPos = startPos.Y.Offset + delta.Y
			main:TweenPosition(UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, yPos), "Out", "Quint", 0.1, true)
		end)

		UserInputService.InputBegan:Connect(function(input, gpe)
			if input.KeyCode == Enum.KeyCode.Insert or input.KeyCode == Enum.KeyCode.KeypadZero then
				local Bool = not self._enabled
				self._enabled = Bool
				self:SetVisible(Bool)
			end
		end)

		ProtectGui(screenGui)
		screenGui.Parent = CoreGui
		return self
	end

	function ConsoleLogger:AddText(textData)
		textData._parent = self
		local textObject = Text.new(textData)

		while #self.logs > 100 do
			local oldestLog = table.remove(self.logs, 1)
			oldestLog:Destroy()
			self:UpdateCanvas()
		end

		return textObject
	end

	function ConsoleLogger:SetVisible(state)
		local Bool = not not state
		self._gui.Enabled = Bool
		self._main.Visible = Bool
	end

	function ConsoleLogger:UpdateCanvas()
		local contentSize = self._layout.AbsoluteContentSize

		self._logs.CanvasSize = UDim2.fromOffset(0, contentSize.Y)

		if self._Configs.chatLoggerAutoScroll then self._logs.CanvasPosition = Vector2.new(0, contentSize.Y) end
	end

	function ConsoleLogger:SetSize(size)
		self._main.Size = size
		self:UpdateCanvas()
	end

	function ConsoleLogger:Clear()
		for _, v in pairs(self._logs:GetChildren()) do
			if v:IsA("TextLabel") then v:Destroy() end
		end

		self.logs = {}
		self.allLogs = {}
		self:UpdateCanvas()
		if MemStorageService:HasItem("ConsoleLogs") then MemStorageService:RemoveItem("ConsoleLogs") end
		-- if isfile("Trap Hub" .. "/console/logs.json") then writefile("Trap Hub" .. "/console/logs.json", "") end
	end

	function ConsoleLogger:SetPosition(position)
		self._main.Position = position
		self:UpdateCanvas()
	end
end

local Console = ConsoleLogger.new()
local queue = setmetatable({}, {
	--[[
	__newindex = function(self, i, v)
		rawset(self, i, v)
		Console:AddText(v)
	end,
	]]
})

local securityContext = getthreadcontext and getthreadcontext() or 6

local function safetostring(arg)
	local mt = getrawmetatable(arg)
	local res

	if mt then
		setreadonly(mt, false)

		local oldfunc = mt.__tostring
		mt.__tostring = nil

		res = tostring(arg)
		mt.__tostring = oldfunc
	else
		res = tostring(arg)
	end

	return res
end

(function()
	local Folder = "Trap Hub"
	local paths = {
		Folder,
		Folder .. "/console",
	}

	for i = 1, #paths do
		local str = paths[i]
		if not isfolder(str) then makefolder(str) end
	end
end)()

local function logtext(options, ...)
	local type = options.type
	local args = options.args
	options.type = nil

	local n = select("#", ...)
	local args = { ... }
	for i = 1, n do
		args[i] = tostring(args[i])
	end

	local text = table.concat(args, "\t")
	local textargs = {
		type = type,
		text = text,
		IsOld = options.IsOld,
		unpack(options),
	}

	xpcall(function() Console:AddText(textargs) end, function(err)
		setthreadcontext(securityContext)
		Console:AddText(textargs)
		setthreadcontext(8)
	end)
end

--[[
for i, v in pairs(isfile("Trap Hub" .. "/console/logs.json") and HttpService:JSONDecode(readfile("Trap Hub" .. "/console/logs.json")) or {}) do
	logtext({
		type = v._type,
		IsOld = true,
	}, v._originalText)
end
]]

if MemStorageService:HasItem("ConsoleLogs") then
	local logs = game:GetService("HttpService"):JSONDecode(MemStorageService:GetItem("ConsoleLogs"))
	for i, v in pairs(logs) do
		if v._type ~= "ERROR" then continue end
		logtext({
			type = v._type,
			IsOld = true,
		}, v._originalText)
	end
end

local old
old = hookfunction(print, function(...)
	if not Console._Configs.OutputRedirect or not checkcaller() then return old(...) end

	logtext({
		type = "OUTPUT",
	}, ...)
end)

local old
old = hookfunction(warn, function(...)
	if not Console._Configs.OutputRedirect or not checkcaller() then return old(...) end

	logtext({
		type = "WARN",
	}, ...)
end)

local info = function(...)
	logtext({
		type = "INFO",
	}, ...)
end

local old
old = hookfunction(error, function(message, level)
	if not checkcaller() then return old(message, level) end
	local trace = debug.traceback()
	local line = trace:split("\n")[2]:gsub("[^%d]", "")
	local message = (":%s: %s%s"):format(line, utf8.char(8203), message)

	logtext({
		type = "ERROR",
	}, message)

	return old(message, level)
end)

getgenv().ScriptContextConsoleTrapHub = function(message, stackTrace, script, details, securityLevel)
	if script and not checkcaller() then return end

	local text = ("%s%s%s\n%s"):format(message:sub(1, 1), utf8.char(8203), message:sub(2), stackTrace)
	logtext({
		type = "ERROR",
	}, text)
end

ScriptContext.ErrorDetailed:Connect(getgenv().ScriptContextConsoleTrapHub)

--[[
	If you want disables connection to the ScriptContext.ErrorDetailed:

	for i, v in pairs(getconnections(ScriptContext.ErrorDetailed)) do
		if v.Function == getgenv().ScriptContextConsoleTrapHub then continue end
		v:Disable()
	end
]]

player.OnTeleport:Connect(function(State)
	if State == Enum.TeleportState.Started or State == Enum.TeleportState.InProgress or State == Enum.TeleportState.RequestedFromServer then
		Teleporting = true
		MemStorageService:SetItem("ConsoleLogs", game:GetService("HttpService"):JSONEncode(Console.allLogs))
		-- writefile("Trap Hub" .. "/console/logs.json", game:GetService("HttpService"):JSONEncode(Console.allLogs))
	end
end)

info(string.format("Console loaded successfully with version %s/%s", Console._Version, "1.4.0"))
